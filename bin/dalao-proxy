#!/usr/bin/env node

const chalk = require('chalk');
const readline = require('readline');
const baseConfig = require('../config');

const { Plugin, register, reloadPlugins } = require('../src/plugin');
const {
    program,
    ConfigParser,
    parserEmitter,
    commands: Commands,
} = require('../src');

let reloading;

// trigger reload when file change
parserEmitter.on('config:triggerParse:fileChange', () => {
    if (!reloading) {
        reloading = true;
        // reload plugins
        setForceReloadAllPlugins();
        registerPlugins();
        console.clear();
        program.context.server.close(function () {
            ConfigParser.parse(program);
        });
    }
});

// On config parsed
parserEmitter.on('config:parsed', function (configObject) {
    const { config } = configObject;
    Object.defineProperty(config, '[[parsed]]', {
        enumerable: false,
        value: true
    });
    program.context.config = config;

    // trigger field `config`
    register._trigger('config', config, value => {
        program.context.config = value;

        // support adding other new plugins during the plugin loading
        loadNewPlugins(value);

        if (config.debug) {
            console.log(chalk.yellow('> parsed user configuration'));
            console.log(program.context.config);
        }
        reloading = false;
    });
});

// Add global options
program
    .use(function defineGlobalOptions() {
        program
            .option('-C, --config <filepath>', 'use custom config file')
    })

    // Command: Start
    .use(Commands.start)

    // Command: Init
    .use(Commands.init)

    // Command: Plugin Manage
    .use(Commands.pluginManager)

    // Register commands from plugins
    .use(registerPlugins)

    // Parse command and options
    .parse(process.argv);

if (program.context.command) {
    // Start parsing config
    ConfigParser.parse(program);

    // Enable input
    if (program._enableInput) {
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout,
            prompt: chalk.green(`Type commands > `),
            completer: cmd => {
                const completions = register.lineCommand;
                const hits = completions.filter(c => c.startsWith(cmd));
                return [
                    hits.length ? hits : completions,
                    cmd
                ];
            }
        });
        // user runtime input listener
        rl.on('line', runtimeCmd => {
            setImmediate(() => rl.prompt());
            register.emit('input', runtimeCmd);

            if (program.context.commandName === 'start') {
                if (/\b(restart|rs|reload)\b/.test(runtimeCmd)) {
                    // trigger reload when user input
                    console.clear();
                    console.log(chalk.green('\n> dalao is reloading...'));

                    if (!reloading) {
                        reloading = true;
                        setForceReloadAllPlugins();
                        registerPlugins();
    
                        program.context.server.close(function () {
                            ConfigParser.parse(program);
                        });
                    }
                }
            }
        });

        rl.on('close', () => {
            process.exit(0);
        })
    }
}
else {
    program.help();
}



// process error caughtor
process.on('uncaughtException', function (err) {
    let pluginErrResult;
    if (/(ECONNREFUSED|ECONNRESET)/i.test(err.message)) {
        console.log(chalk.red('\n> Oops, dalao can\'t proxy to target'));
        console.error(err.message);
    }
    else if (pluginErrResult = err.message.match(/Cannot\sfind\smodule\s'(.+)'/)) {
        console.log(chalk.red(`${pluginErrResult[0]}. Please check if module '${pluginErrResult[1]}' is installed`));
    }
    else {
        console.log(chalk.red('\n> ðŸ˜«  Oops, dalao can\'t handle this...'));
        console.error(err);
        console.log(chalk.yellow(`
    Current version: ${baseConfig.version}
    You may need to:
    1.Update to the latest version by \`(sudo) npm i dalao-proxy@latest -g\`.
    2.Look up your config file, check if there is any problem(s) with installed plugins.
    3.Create a bug issue on https://github.com/CalvinVon/dalao-proxy/issues.
    
    dalao is sorry about this.`)
        );
    }
});


// add all loaded plugins to reload list
function setForceReloadAllPlugins() {
    const loadedPlugins = program.context.plugins;
    loadedPlugins.forEach(plugin => {
        if (!Plugin.modifiedPluginIds.has(plugin.id)) {
            Plugin.modifiedPlugins.push(plugin);
        }
    });
}

function loadNewPlugins(config) {
    const loadedPlugins = program.context.plugins;
    reloadPlugins();

    const newPluginNames = [...config.plugins];
    loadedPlugins.forEach(plugin => {
        const foundIndex = newPluginNames.findIndex(name => {
            if (typeof (name) === 'string') {
                return name === plugin.name;
            }
            else if (Array.isArray(name)) {
                const [pluginName] = name;
                return pluginName === plugin.name;
            }
        });

        newPluginNames.splice(foundIndex, 1);
    });

    instantiatedPlugins(program, newPluginNames);
    ConfigParser.mergePluginsConfig(config, program.context.plugins);
}


function registerPlugins() {
    const { rawConfig, config, path } = ConfigParser.parsePlugins();
    Object.defineProperty(config, '[[parsed]]', {
        enumerable: false,
        value: false
    });
    program.context.rawConfig = rawConfig;
    program.context.config = config;
    program.context.configPath = path;

    loadNewPlugins(config);
}

// create plugins instances
function instantiatedPlugins(program, pluginsNames) {
    // program.context.plugins = [];
    // register._reset();

    pluginsNames.forEach(name => {
        let plugin;
        if (typeof(name) === 'string') {
            plugin = new Plugin(name, program.context);
        }
        else if (Array.isArray(name)) {
            const [pluginName, pluginSetting] = name;
            plugin = new Plugin(pluginName, program.context, pluginSetting);
        }
        program.context.pluginIds.add(plugin.id);
        program.context.plugins.push(plugin);
    });
};
