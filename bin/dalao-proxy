#!/usr/bin/env node

const chalk = require('chalk');
const readline = require('readline');
const baseConfig = require('../config');

const register = require('../src/plugin').register;
const {
    program,
    ConfigParser,
    parserEmitter,
    printWelcome,
    usePlugins,
    commands: Commands,
} = require('../src');

printWelcome(baseConfig.version);

parserEmitter.on('config:triggerParse:fileChange', () => {
    // reload plugins
    registerPlugins();
});

// On config parsed
parserEmitter.on('config:parsed', function (configObject) {
    const { config } = configObject;
    config['[[parsed]]'] = true;
    program.context.config = config;

    // trigger field `config`
    register._trigger('config', config, value => {
        program.context.config = value;

        if (config.debug) {
            console.log(chalk.yellow('> parsed user configuration'));
            console.log(program.context.config);
        }
    });
});

// Add global options
program
    .use(function defineGlobalOptions() {
        program
            .option('-C, --config <filepath>', 'use custom config file')
    })

    // Command: Start
    .use(Commands.start)

    // Command: Init
    .use(Commands.init)

    // Command: Plugin Manage
    .use(Commands.pluginManager)

    // Register commands from plugins
    .use(registerPlugins)

    // Parse command and options
    .parse(process.argv);

if (program.context.command) {
    // Start parsing config
    ConfigParser.parse(program);

    // Enable input
    if (program._enableInput) {
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        // user runtime input listener
        rl.on('line', runtimeCmd => {
            register.emit('input', runtimeCmd);

            if (program.context.commandName === 'start') {
                if (/\b(restart|rs|reload)\b/.test(runtimeCmd)) {
                    console.clear();
                    console.log(chalk.green('\n> dalao is reloading...'));

                    program.context.server.close(function () {
                        ConfigParser.parse(program);
                    });
                }
            }
        });
    }
}
else {
    program.help();
}



// process error caughtor
process.on('uncaughtException', function (err) {
    if (/(ECONNREFUSED|ECONNRESET)/i.test(err.message)) {
        console.log(chalk.red('\n> ðŸ˜«  Oops, dalao can\'t proxy to target'));
        console.error(err.message);
    }
    else {
        console.log(chalk.red('\n> ðŸ˜«  Oops, dalao can\'t handle this...'));
        console.error(err);
        console.log(chalk.yellow(`
    Current version: ${baseConfig.version}
    You may need to: 1.Update to the latest version by \`(sudo) npm i dalao-proxy@latest -g\`. 2.Look up your config file, check
    if there is any syntax problem(s). 3.Create a bug issue on https://github.com/CalvinVon/dalao-proxy/issues.
    dalao is sorry about this.`)
        );
    }
});


function registerPlugins() {
    const { rawConfig, config, path } = ConfigParser.parsePlugins();
    config['[[parsed]]'] = false;
    program.context.rawConfig = rawConfig;
    program.context.config = config;
    program.context.configPath = path;
    usePlugins(program, config.plugins);
}